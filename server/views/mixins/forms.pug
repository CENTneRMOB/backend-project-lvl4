- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const isSelected = (item, entity, propertyName) => {
-   if (propertyName !== 'labels') {
-     return entity[`${propertyName}`] === item.id;   
-   }
-   if (entity.labelsId) {
-     if (typeof entity.labelsId === 'number') {
-       return entity.labelsId === item.id;
-     }
-
-     const labels = entity.labelsId.split(',').map((id) => Number(id));
-     return labels.includes(item.id);
-   }
-
-   return false;
- }
- const isSelectedFilter = (item, queryParams, itemType) => {
-   if (_.has(queryParams, itemType) && item.id == queryParams[itemType]) {
-     return true;
-   }
-   return false;
- }

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {}, entityType)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${entityType}.${propertyName}`)
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, errors = {}, entityType)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - value = _.get(entity, propertyName, '')
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${entityType}.${propertyName}`)
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)= value
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, items, propertyName, errors = {}, entityType, multiple = false)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(errors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${entityType}.${propertyName}`)
    select(
      id= inputId
      name=getInputName(propertyName)
      multiple=multiple
      class=classLine
    )&attributes(attributes) 
      if _.isEmpty(entity) 
        option(selected= multiple ? false : 'selected')
        each item in items
          option(value=item.id)= item.name || `${item.firstName} ${item.lastName}`
      else
        option()
        each item in items
          option(value=item.id selected=(isSelected(item, entity, propertyName) ? 'selected' : false))= item.name || `${item.firstName} ${item.lastName}`
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-dark' type='submit')&attributes(attributes)

mixin buttonTo(action, method, entityType)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin list(items)
  ul
    each item in items
      li= item.name

mixin checkbox(name, queryParams = {})
  - inputId = getInputId(name)
  input(id=inputId class='form-check-input' type='checkbox' name=name checked=(
    _.has(queryParams, 'isCreatorUser') ? 'on' : false
  ))
  label(class= 'form-check-label' for= inputId)= t(`views.tasks.filter.${name}`)

mixin filterSelect(items, propertyName, itemType, queryParams = {})
  - classLine = 'form-control ml-2 mr3'
  - inputId = getInputId(itemType)
  .col
      .m-3
        label(
          for= inputId
        )= t(`views.tasks.filter.${propertyName}`)
        select(
          id= inputId
          name=itemType
          class=classLine
        )&attributes(attributes) 
          option()
          each item in items
            option(value=item.id selected=(isSelectedFilter(item, queryParams, itemType) ? 'selected' : false))= item.name || `${item.firstName} ${item.lastName}`